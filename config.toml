# Configuration parameters for Beaverdam

[raw_metadata]
# Information about the location and type of (meta)data files to include in the
# database.  Only needed to build a database, not to run a user interface with an
# existing database.
#
# directory (str): directory containing (meta)data files.  Files in subdirectories will
#   also be included.
# file_type (str):  extension of files to include.  Currently this can be '.json' or
#   '.odml'.
directory = '/home/more/Documents/Beaverdam/Odml/odml_r2g_all_2024-02-08'
file_type = '.odml'

[database]
# Information about the database containing (meta)data.  This is the database which will 
# be created, updated, or read from.
#
# address (str):  use 'localhost' to run Beaverdam locally
# port (int):  most likely you will use 27017 to run Beaverdam locally
# db_name (str):  name of the database to use (will be created if it doesn't exist)
# collection_name (str):  name of the collection to use (will be created if it doesn't
#   exist).  This is needed because MongoDB stores documents in collections within
#   databases.
address = "localhost"
port = 27017
db_name = "testodml"
collection_name = "odmlmetadata_r2g"

[fields]
# The name you want to use to refer to each (meta)data field, and the location of the
# field in the database.
#
# Include as many fields as you want, each on a new line with the format:
#   NameOfField = "path.to.field"
#
# NameOfField ():  text that will also show up in the dashboard, e.g. as column names.
#   Therefore it should be somewhat self-explanatory.  Cannot include spaces.
# "path.to.field" (str):  location of the (meta)data field in the database.  If you used
#   json files, this is probably something like:
#       "FirstSectionName.SubSection.SubSubSection"
#   For metadata files with complex structures, it might be helpful to find field
#   locations using a tool like [Studio3T](https://studio3t.com/free/) or its
#   free-forever predecessor [Robo3T](https://github.com/Studio3T/robomongo).
SessionID = "_id"
GivenName = "Document.sections.Subject.properties.GivenName.value"
Date = "Document.sections.Recording.properties.Date.value"
Weekday = "Document.sections.Recording.properties.Weekday.value"
Time = "Document.sections.Recording.properties.Time.value"
Duration = "Document.sections.Recording.properties.Duration.value"
TaskType = "Document.sections.Recording.properties.TaskType.value"
TotalTrialCount = "Document.sections.Recording.sections.TaskSettings.properties.TotalTrialCount.value"
CorrectTrialCount = "Document.sections.Recording.sections.TaskSettings.properties.CorrectTrialCount.value"
GripErrorTrialCount = "Document.sections.Recording.sections.TaskSettings.properties.GripErrorTrialCount.value"
IsSpikeSorted = "Document.sections.Recording.properties.IsSpikeSorted.value"
TrialTypes = "Document.sections.Experiment.sections.Behavior.properties.TrialTypes.value"

[filters]
# Which fields you will be able to place conditions on to filter items.  These fields
# will each be turned into a set of checkboxes showing all available options for that
# field.
#
# headings (list of strings):  fields to show as checkboxes, using the field names you
#   defined in [fields] written as strings.  For example, if you defined
#   NameOfFirstField and NameOfSecondField in [fields], you could here say:
#       headings = ["NameOfFirstField", "NameOfSecondField"]
headings = ["GivenName", "TaskType", "IsSpikeSorted"]

[table]
# Which fields to show in the data table
#
# columns (list of strings):  fields to show as columns in the data table, using the
#   field names you defined in [fields] written as strings.  For example, if you defined
#   NameOfFirstField and NameOfSecondField in [fields], you could here say:
#       columns = ["NameOfFirstField", "NameOfSecondField"]
columns = [
    "GivenName",
    "Date",
    "Weekday",
    "Time",
    "Duration",
    "TaskType",
    "TotalTrialCount",
    "CorrectTrialCount",
    "GripErrorTrialCount",
    "IsSpikeSorted",
    "TrialTypes",
]

[plots]
# Which fields to plot, and how to plot them.  Each plot must have a unique name and the
# following keys:
#   - data_field (string or list of strings): name of the field(s) to plot
#   - plot_type (string): type of plot ("pie", "bar", "scatter", "box")
#
# Currently the following plot types are defined:
#
#   Pie chart:  plots the values of a single field.  Include these two lines for each
#       pie chart you want to make, with a different PlotName for each chart and
#       substituting NameOfField with the field you want to plot:
#           PlotName.data_field = "NameOfField"
#           PlotName.plot_type = "pie"
#
#   Bar chart:  plots the values of a single field.  Include these two lines for each
#       bar chart you want to make, with a different PlotName for each chart and
#       substituting NameOfField with the field you want to plot:
#           PlotName.data_field = "NameOfField"
#           PlotName.plot_type = "bar"
#
#   Scatter plot:  plots the values of two fields.  Include these two lines for each
#       scatter plot you want to make, with a different PlotName for each plot and
#       substituting NameOfFieldY and NameOfFieldX with the fields you want to plot on
#       the Y and X axes, respectively:
#           PlotName.data_field = ["NameOfFieldY", "NameOfFieldX"]
#           PlotName.plot_type = "scatter"
#
#   Box plot:  plots the values of two fields.  Include these two lines for each box
#       plot you want to make, with a different PlotName for each plot and substituting
#       NameOfFieldY and NameOfFieldX with the fields you want to plot on the Y and X
#       axes, respectively:
#           PlotName.data_field = ["NameOfFieldY", "NameOfFieldX"]
#           PlotName.plot_type = "box"
monkey_name.data_field = "GivenName"
monkey_name.plot_type = "pie"

task_name.data_field = "TaskType"
task_name.plot_type = "bar"

errors_vs_monkey.data_field = ["GripErrorTrialCount", "Duration"]
errors_vs_monkey.plot_type = "scatter"

errors_vs_day.data_field = ["GripErrorTrialCount", "Weekday"]
errors_vs_day.plot_type = "box"
